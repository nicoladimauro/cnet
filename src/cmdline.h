/** @file cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.6
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE "cnet"
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CMDLINE_PARSER_PACKAGE_NAME "cnet"
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION "1.0"
#endif

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  char * problem_arg;	/**< @brief Input problem name.  */
  char * problem_orig;	/**< @brief Input problem name original value given at command line.  */
  const char *problem_help; /**< @brief Input problem name help description.  */
  int* min_inst_arg;	/**< @brief Minimum number of instances for a slice (default='500').  */
  char ** min_inst_orig;	/**< @brief Minimum number of instances for a slice original value given at command line.  */
  unsigned int min_inst_min; /**< @brief Minimum number of instances for a slice's minimum occurreces */
  unsigned int min_inst_max; /**< @brief Minimum number of instances for a slice's maximum occurreces */
  const char *min_inst_help; /**< @brief Minimum number of instances for a slice help description.  */
  int* min_feat_arg;	/**< @brief Minimum number of features for a slice (default='4').  */
  char ** min_feat_orig;	/**< @brief Minimum number of features for a slice original value given at command line.  */
  unsigned int min_feat_min; /**< @brief Minimum number of features for a slice's minimum occurreces */
  unsigned int min_feat_max; /**< @brief Minimum number of features for a slice's maximum occurreces */
  const char *min_feat_help; /**< @brief Minimum number of features for a slice help description.  */
  double* alpha_arg;	/**< @brief Pseudocounts for the smoothing (default='1').  */
  char ** alpha_orig;	/**< @brief Pseudocounts for the smoothing original value given at command line.  */
  unsigned int alpha_min; /**< @brief Pseudocounts for the smoothing's minimum occurreces */
  unsigned int alpha_max; /**< @brief Pseudocounts for the smoothing's maximum occurreces */
  const char *alpha_help; /**< @brief Pseudocounts for the smoothing help description.  */
  char * output_dir_arg;	/**< @brief Output dir path (default='exp').  */
  char * output_dir_orig;	/**< @brief Output dir path original value given at command line.  */
  const char *output_dir_help; /**< @brief Output dir path help description.  */
  char * model_arg;	/**< @brief The model to use (default='cnet').  */
  char * model_orig;	/**< @brief The model to use original value given at command line.  */
  const char *model_help; /**< @brief The model to use help description.  */
  int* option_length_arg;	/**< @brief The number of or nodes in the option nodes (default='3').  */
  char ** option_length_orig;	/**< @brief The number of or nodes in the option nodes original value given at command line.  */
  unsigned int option_length_min; /**< @brief The number of or nodes in the option nodes's minimum occurreces */
  unsigned int option_length_max; /**< @brief The number of or nodes in the option nodes's maximum occurreces */
  const char *option_length_help; /**< @brief The number of or nodes in the option nodes help description.  */
  int ensemble_flag;	/**< @brief Whether to build an ensemble model (default=off).  */
  const char *ensemble_help; /**< @brief Whether to build an ensemble model help description.  */
  int k_arg;	/**< @brief The number of ensemble components (default='5').  */
  char * k_orig;	/**< @brief The number of ensemble components original value given at command line.  */
  const char *k_help; /**< @brief The number of ensemble components help description.  */
  int seed_arg;	/**< @brief Seed for the random generator (default='117').  */
  char * seed_orig;	/**< @brief Seed for the random generator original value given at command line.  */
  const char *seed_help; /**< @brief Seed for the random generator help description.  */
  int verbose_flag;	/**< @brief Verbosity flag (default=off).  */
  const char *verbose_help; /**< @brief Verbosity flag help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int problem_given ;	/**< @brief Whether problem was given.  */
  unsigned int min_inst_given ;	/**< @brief Whether min-inst was given.  */
  unsigned int min_feat_given ;	/**< @brief Whether min-feat was given.  */
  unsigned int alpha_given ;	/**< @brief Whether alpha was given.  */
  unsigned int output_dir_given ;	/**< @brief Whether output-dir was given.  */
  unsigned int model_given ;	/**< @brief Whether model was given.  */
  unsigned int option_length_given ;	/**< @brief Whether option-length was given.  */
  unsigned int ensemble_given ;	/**< @brief Whether ensemble was given.  */
  unsigned int k_given ;	/**< @brief Whether k was given.  */
  unsigned int seed_given ;	/**< @brief Whether seed was given.  */
  unsigned int verbose_given ;	/**< @brief Whether verbose was given.  */

} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief the description string of the program */
extern const char *gengetopt_args_info_description;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char **argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);

extern const char *cmdline_parser_model_values[];  /**< @brief Possible values for model. */


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
